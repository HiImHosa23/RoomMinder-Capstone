{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","app","PORT","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","err","error","roommateSchema","Schema","name","String","likes","dislikes","expectations","contact","imageURL","Roommate","model","get","req","res","find","roomies","status","message","post","newRoomie","body","save","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMG,GAAG,GAAGJ,OAAO,EAAnB;AACA,IAAMK,IAAI,GAAG,IAAb;AAEAD,GAAG,CAACE,GAAJ,CAAQH,IAAI,EAAZ;AACAC,GAAG,CAACE,GAAJ,CAAQN,OAAO,CAACO,IAAR,EAAR;AAEAL,QAAQ,CAACM,OAAT,CAAiB,wEAAjB,EAA2F;AACvFC,EAAAA,eAAe,EAAE,IADsE;AAEvFC,EAAAA,kBAAkB,EAAE;AAFmE,CAA3F,EAIKC,IAJL,CAIU;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,6BAAZ,CAAN;AAAA,CAJV,WAKW,UAAAC,GAAG;AAAA,SAAIF,OAAO,CAACG,KAAR,CAAc,2BAAd,EAA2CD,GAA3C,CAAJ;AAAA,CALd;AAQA,IAAME,cAAc,GAAG,IAAId,QAAQ,CAACe,MAAb,CAAoB;AACvCC,EAAAA,IAAI,EAAEC,MADiC;AAEvCC,EAAAA,KAAK,EAAE,CAACD,MAAD,CAFgC;AAGvCE,EAAAA,QAAQ,EAAE,CAACF,MAAD,CAH6B;AAIvCG,EAAAA,YAAY,EAAEH,MAJyB;AAKvCI,EAAAA,OAAO,EAAEJ,MAL8B;AAMvCK,EAAAA,QAAQ,EAAEL;AAN6B,CAApB,CAAvB;AASA,IAAMM,QAAQ,GAAGvB,QAAQ,CAACwB,KAAT,CAAe,UAAf,EAA2BV,cAA3B,CAAjB;AAEAZ,GAAG,CAACuB,GAAJ,CAAQ,eAAR,EAAyB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEKJ,QAAQ,CAACK,IAAT,EAFL;;AAAA;AAEXC,UAAAA,OAFW;AAGjBF,UAAAA,GAAG,CAACtB,IAAJ,CAASwB,OAAT;AAHiB;AAAA;;AAAA;AAAA;AAAA;AAKjBF,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB;AAAC0B,YAAAA,OAAO,EAAE;AAAV,WAArB;;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AASA7B,GAAG,CAAC8B,IAAJ,CAAS,gBAAT,EAA2B,kBAAON,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbM,UAAAA,SAFa,GAED,IAAIV,QAAJ,CAAaG,GAAG,CAACQ,IAAjB,CAFC;AAAA;AAAA,0CAGbD,SAAS,CAACE,IAAV,EAHa;;AAAA;AAInBR,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB4B,SAArB;AAJmB;AAAA;;AAAA;AAAA;AAAA;AAMnBN,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB;AAAC0B,YAAAA,OAAO,EAAE;AAAV,WAArB;;AANmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAUA7B,GAAG,CAACkC,MAAJ,CAAWjC,IAAX,EAAiB,YAAM;AACnBO,EAAAA,OAAO,CAACC,GAAR,6CAAiDR,IAAjD;AACH,CAFD","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst PORT = 3001;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nmongoose.connect('mongodb+srv://dev:Nc210960870@cluster0.peco6ve.mongodb.net/roommatesDB', {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n})\r\n    .then(() => console.log('Connected to MongoDB Atlas!'))\r\n    .catch(err => console.error('MongoDB connection error:', err));\r\n\r\n\r\nconst roommateSchema = new mongoose.Schema({\r\n    name: String,\r\n    likes: [String],\r\n    dislikes: [String],\r\n    expectations: String, \r\n    contact: String,\r\n    imageURL: String\r\n});\r\n\r\nconst Roommate = mongoose.model('Roommate', roommateSchema);\r\n\r\napp.get('/api/roomates', async (req, res) => {\r\n    try{\r\n        const roomies = await Roommate.find();\r\n        res.json(roomies);\r\n    } catch(error){\r\n        res.status(500).json({message: 'There was an error fetching this roommate'});\r\n    }\r\n});\r\n\r\napp.post('/api/roommates', async (req, res) => {\r\n    try{\r\n        const newRoomie = new Roommate(req.body);\r\n        await newRoomie.save();\r\n        res.status(201).json(newRoomie);\r\n    } catch(error){\r\n        res.status(400).json({message: 'There was an error saving this roommate'});\r\n    }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`The server is runnig on localhost:${PORT}!`);\r\n})\r\n\r\n"],"file":"server.dev.js"}